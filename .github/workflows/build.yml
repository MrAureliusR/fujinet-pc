name: Build FujiNet-PC

on:
#   push:
#     branches: [ fujinet-pc ]
#   pull_request:
#     branches: [ fujinet-pc ]
  workflow_dispatch:
    inputs:
      buildType:
        description: 'Build Type'
        required: true
        type: choice
        options:
        - Debug
        - RelWithDebInfo
        - Release
        default: 'Debug'
      releaseBuild:
        description: 'Make a release build (adds tag)'
        type: boolean
        default: false
      doRelease:
        description: 'Create GitHub Release'
        type: boolean
        default: false
      draftRelease:
        description: 'Draft'
        type: boolean
        default: false
      releaseVersion:
        description: 'Release version, blank for auto'
        
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: ${{ github.event.inputs.buildType }}

jobs:
  build-prep:
    # prepare to build a release: create tag release-{version} pointing to head
    runs-on: ubuntu-latest
    name: Prepare
    steps:
#     - name: List inputs
#       run: |
#         echo 'buildType: ${{ github.event.inputs.buildType }}'
#         echo 'releaseBuild: ${{ github.event.inputs.releaseBuild }}'
#         echo 'releaseVersion: ${{ github.event.inputs.releaseVersion }}'
    - name: Not release build
      if: ${{ github.event.inputs.releaseBuild == 'false' }}
      run: |
        echo 'This build in not a release build.'
        echo 'Release tag will not be created.'
        echo 'However if release tag exists on HEAD, it will be used to make a release build.'
    - name: Prepeare for release build
      if: ${{ github.event.inputs.releaseBuild == 'true' }}
      run: |
        echo 'This build is release build.'
        echo 'New release tag will be created (or existing tag on HEAD will be used) to make a release build.'
    - name: 'ðŸ§° Checkout'
      if: ${{ github.event.inputs.releaseBuild == 'true' }}
      uses: actions/checkout@v3
    - name: Fetch tags
      if: ${{ github.event.inputs.releaseBuild == 'true' }}
      run: git fetch --prune --unshallow --tags
    - name: Prepare release tag
      if: ${{ github.event.inputs.releaseBuild == 'true' }}
      run: python build_version.py release:push ${{ github.event.inputs.releaseVersion }}

  build:
    needs: build-prep
    strategy:
      fail-fast: false
      matrix:
        name: [Ubuntu 22.04]
        target: [ubuntu-22.04-amd64]
        runner: [ubuntu-22.04]
        default-shell: [bash]
        include:
          - name: Ubuntu 20.04
            target: ubuntu-20.04-amd64
            runner: ubuntu-20.04
            default-shell: bash
          - name: macOS 12
            target: macos-12
            runner: macos-12
            default-shell: bash
          - name: Windows
            target: windows-x64
            runner: windows-latest
            sys: clang64
            default-shell: msys2 {0}
          - name: Windows x86
            target: windows-x86
            runner: windows-latest
            sys: clang32
            default-shell: msys2 {0}
    # continue-on-error: true
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: ${{ matrix.default-shell }}
    outputs:
      release_version: ${{ steps.version.outputs.release }}
      fujinet_version: ${{ steps.version.outputs.fujinet }}

    steps:
    # Setup MSYS2 on Windows
    - name: '[Windows] Setup MSYS2'
      if: ${{ startsWith(matrix.target, 'windows') }}
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.sys}}
        update: true
        install: >-
          git
          base-devel
        pacboy: >-
          toolchain:p
          cmake:p
          ninja:p
          python-pip:p
          mbedtls:p

    - name: '[macOS] Install MbedTLS'
      if: ${{ startsWith(matrix.target, 'macos') }}
      run: |
        brew update
        brew install mbedtls

    - name: '[Ubuntu] Install MbedTLS'
      if: ${{ startsWith(matrix.target, 'ubuntu') }}
      run: |
        sudo apt-get update
        sudo apt-get install -y libmbedtls-dev

    - name: About ${{ matrix.name }}
      run: |
        echo "Building for ${{ matrix.name }} (${{ matrix.target }}) on ${{ matrix.runner }}"
        uname -a

    - name: 'ðŸ§° Checkout'
      uses: actions/checkout@v3

    - name: Fetch tags
      run: git fetch --prune --unshallow --tags

    - name: Install Python
      uses: actions/setup-python@v4
      id: cp310
      with:
        python-version: '3.10'

    - name: Check Python version
      run: |
        which python
        python --version
        echo '${{ steps.cp310.outputs.python-path }}'
        '${{ steps.cp310.outputs.python-path }}' --version
  
    - name: Install Python packages
      run: pip install -U Jinja2 pyyaml
  
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: 'ðŸš§ Build FujiNet-PC'
      run: cmake --build build --target all -j 10

    - name: Prepare dist
      run: cmake --build build --target dist

    # # Windows runner is pre-installed with some openssl
    # # dist target skippes libssl and libcrypto in /c/Windows/SYSTEM32/
    # # add missing libs now
    # - name: "[Windows] Update dist with OpenSSL"
    #   if: ${{ startsWith(matrix.target, 'windows') }}
    #   run: |
    #     cp -pv /${{ matrix.sys }}/bin/libssl-*.dll build/dist
    #     cp -pv /${{ matrix.sys }}/bin/libcrypto-*.dll build/dist

    - name: "[Windows x86] Update dist with missing DLLs"
      if: ${{ startsWith(matrix.target, 'windows-x86') }}
      run: |
        for L in libc++ libexpat- libwinpthread-
        do
          cp -pv /${{ matrix.sys }}/bin/${L}*.dll build/dist
        done

    - name: List dist
      working-directory: build/dist
      run: ls -la .

    - name: 'Get build version'
      id: version
      working-directory: build/dist
      run: |
        ./fujinet -V
        echo "fujinet=$(./fujinet -V | awk '{if(tolower($1)=="fujinet-pc") print $2}')" >> $GITHUB_OUTPUT
        echo "release=$(./fujinet -V | awk '{if(tolower($1)=="fujinet-pc") print $2}' | sed 's/\(\.[1-9]\)\..*/\1/')" >> $GITHUB_OUTPUT

    - name: 'Tar dist files'
      working-directory: build
      run: |
        mv dist fujinet-pc
        tar -cvf fujinet-pc_${{ steps.version.outputs.release }}_${{ matrix.target }}.tar fujinet-pc

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: fujinet-pc_${{ steps.version.outputs.release }}_${{ matrix.target }}
        path: build/fujinet-pc_${{ steps.version.outputs.release }}_${{ matrix.target }}.tar
        
  release:
    if: ${{ github.event.inputs.releaseBuild == 'true' && github.event.inputs.doRelease == 'true'}}
    # Create release
    runs-on: ubuntu-latest
    name: Release
    needs: build

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        path: release

    - name: Display structure of downloaded files
      run: ls -lR release
      
    - name: Zip release files
      working-directory: release
      run: |
        for D in fujinet-pc_*ubuntu* fujinet-pc_*macos*; do gzip -9v $D/fujinet-pc_*.tar; done
        for D in fujinet-pc_*windows*; do (cd $D; F=(fujinet-pc_*.tar); tar -xvf $F; zip -r ${F%.*}.zip fujinet-pc); done
        
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
          name: "FujiNet-PC ${{ needs.build.outputs.release_version }}"
          tag_name: release-${{ needs.build.outputs.release_version }}
          draft: ${{ github.event.inputs.draftRelease }}
          files: |
            release/fujinet-pc_*/fujinet-pc_*.tar.gz
            release/fujinet-pc_*/fujinet-pc_*.zip
